// 加载模块const nedb = require('nedb');// 实例化连接对象（不带参数默认为内存数据库）//消息表const Message = new nedb({  filename: '/IMChatData/Message.db',  autoload: true});export default {  //添加聊天记录到本地存储  insertMessage: function(message, timestamp) {    let type = message.type;    let number = '';    let doc = {};    if (type == 0) {// 单聊      doc = {        id: message.fromid,        timestamp: timestamp,// 用来排序        msg: {          mine: message.mine,// 是否是自己          fromid: message.fromid,// 消息发送人,          id: message.id,// 消息接收人          timestamp: message.timestamp,// 发送消息的时间戳          content: message.content,// 消息内容          type: message.type,// 消息类型 0 单聊  1 群聊          length: message.length,// 消息长度          msgType: message.msgType,// 消息类型，文本，图片，视频          avatar: message.avatar,// 头像地址          username: message.username// 用户名        }      };    } else {//群聊      doc = {        id: message.id,        timestamp: timestamp,// 用来排序        msg: {          mine: message.mine,// 是否是自己          fromid: message.fromid,// 消息发送人,          id: message.id,// 消息接收人          timestamp: message.timestamp,// 发送消息的时间戳          content: message.content,// 消息内容          type: message.type,// 消息类型 0 单聊  1 群聊          length: message.length,// 消息长度          msgType: message.msgType,// 消息类型，文本，图片，视频          avatar: message.avatar,// 头像地址          username: message.username// 用户名        }      };    }    Message.insert(doc, (err, ret) => {    });  },  //查询聊天记录  findMessage: function(self, messageId) {    Message.find({ id: messageId }).sort({ timestamp: -1 }).exec(function(err, ret) {      let userid = self.$store.state.user.id;//当前登录用户的ID      let msgList = ret;      if (msgList != null && msgList.length > 0) {        for (let i = msgList.length - 1; i >= 0; i--) {          let msg = msgList[i].msg;          self.$store.commit('addUnreadMessage', msg);        }      }    });  },  //修改聊天记录  updateMessage: function() {  },  //移除聊天记录  removeMessage: function() {    //删除全部数据    Message.remove({}, { multi: true }, (err, ret) => {    });  }};